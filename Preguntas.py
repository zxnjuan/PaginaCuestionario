import tkinter as tk

# Crear la ventana principal
ventana = tk.Tk()
ventana.title("Cuestionario Algoritmos Gen√©ticos")
ventana.geometry("900x800")
ventana.config(bg="#f0e6ff")

# Lista de preguntas, opciones y respuesta correcta
preguntas = [
    {
        "pregunta": "¬øQu√© caracter√≠sticas de la evoluci√≥n biol√≥gica inspiran el funcionamiento de los algoritmos gen√©ticos?",
        "opciones": [
            "A) La fotos√≠ntesis de las plantas",
            "B) La selecci√≥n natural y la adaptaci√≥n de las especies",
            "C) El crecimiento celular",
            "D) La mutaci√≥n de virus en organismos"
        ],
        "respuesta_correcta": "B) La selecci√≥n natural y la adaptaci√≥n de las especies"
    },
    {
        "pregunta": "¬øCu√°l es el prop√≥sito principal de utilizar operadores como la selecci√≥n, el cruzamiento y la mutaci√≥n dentro de un algoritmo gen√©tico?",
        "opciones": [
            "A) Hace que el programa consuma menos memoria",
            "B) Generar nuevas soluciones y mejorar las existentes de manera progresiva",
            "C) Aumentar el n√∫mero de generaciones sin modificar los resultados",
            "D) Eliminar individuos que no cumplan con los objetivos iniciales"
        ],
        "respuesta_correcta": "B) Generar nuevas soluciones y mejorar las existentes de manera progresiva"
    },
    {
        "pregunta": "¬øEn qu√© tipo de problemas o √°reas se aplican com√∫nmente los algoritmos gen√©ticos?",
        "opciones": [
            "A) Solo en videojuegos y simulaciones",
            "B) En optimizaciones de rutas, dise√±o de redes y toma de decisiones complejas",
            "C) √önicamente en biolog√≠a computacional",
            "D) En cualquier problema que no requiera an√°lisis matem√°tico"
        ],
        "respuesta_correcta": "B) En optimizaciones de rutas, dise√±o de redes y toma de decisiones complejas"
    },
    {
        "pregunta": "¬øQu√© ventaja ofrecen los algoritmos gen√©ticos frente a los m√©todos tradicionales de optimizaci√≥n?",
        "opciones": [
            "A) Siempre encuentra la soluci√≥n perfecta en poco tiempo",
            "B) No necesita una funci√≥n de evaluaci√≥n para operar",
            "C) Puede explorar m√∫ltiples soluciones y adaptarse a distintos tipos de problemas",
            "D) Requiere menos pasos que cualquier otro algoritmo"
        ],
        "respuesta_correcta": "C) Puede explorar m√∫ltiples soluciones y adaptarse a distintos tipos de problemas"
    },
    {
        "pregunta": "¬øCu√°l es el prop√≥sito fundamental de los algoritmos gen√©ticos (AGs) seg√∫n su descripci√≥n en la fuente?",
        "opciones": [
            "A) La creaci√≥n de bases de datos estructuradas",
            "B) La simulaci√≥n de sistemas f√≠sicos deterministas",
            "C) Una t√©cnica de optimizaci√≥n y b√∫squeda para resolver problemas complejos",
            "D) El an√°lisis estad√≠stico de grandes conjuntos de datos"
        ],
        "respuesta_correcta": "C) Una t√©cnica de optimizaci√≥n y b√∫squeda para resolver problemas complejos"
    },
    {
        "pregunta": "¬øQu√© fen√≥meno natural sirve de inspiraci√≥n para las t√©cnicas de los algoritmos gen√©ticos?",
        "opciones": [
            "A) El principio de inercia",
            "B) La evoluci√≥n biol√≥gica",
            "C) La gravedad y sus efectos",
            "D) Los ciclos qu√≠micos"
        ],
        "respuesta_correcta": "B) La evoluci√≥n biol√≥gica"
    },
    {
        "pregunta": "¬øMediante qu√© mecanismo principal funcionan los algoritmos gen√©ticos?",
        "opciones": [
            "A) Mediante la aplicaci√≥n de t√©cnicas de regresi√≥n m√∫ltiple",
            "B) Mediante la resoluci√≥n directa de ecuaciones diferenciales",
            "C) Simulando la selecci√≥n natural",
            "D) Aplicando el m√©todo de Montecarlo"
        ],
        "respuesta_correcta": "C) Simulando la selecci√≥n natural"
    },
    {
        "pregunta": "¬øCu√°l de las siguientes opciones nombra uno de los tres procesos fundamentales (operadores) que permiten la evoluci√≥n iterativa de la poblaci√≥n de soluciones?",
        "opciones": [
            "A) Cuantificaci√≥n",
            "B) Normalizaci√≥n",
            "C) El cruce",
            "D) La inicializaci√≥n"
        ],
        "respuesta_correcta": "C) El cruce"
    },
    {
        "pregunta": "¬øEl proceso de evoluci√≥n en los algoritmos gen√©ticos ocurre de qu√© manera?",
        "opciones": [
            "A) Est√°tica e instant√°nea",
            "B) Lineal y constante",
            "C) Iterativa a lo largo de generaciones",
            "D) Puramente aleatoria sin retroalimentaci√≥n"
        ],
        "respuesta_correcta": "C) Iterativa a lo largo de generaciones"
    },
    {
        "pregunta": "¬øCu√°l es el objetivo final de la evoluci√≥n de la poblaci√≥n a lo largo de las generaciones en un algoritmo gen√©tico?",
        "opciones": [
            "A) Un conjunto de soluciones dispersas",
            "B) La soluci√≥n m√°s compleja te√≥ricamente",
            "C) Una soluci√≥n √≥ptima o casi √≥ptima",
            "D) El punto de partida"
        ],
        "respuesta_correcta": "C) Una soluci√≥n √≥ptima o casi √≥ptima"
    }
]

# Variables globales
respuestas = []
indice = 0
puntaje_correctas = 0
puntaje_incorrectas = 0
respondido = False

# Etiqueta de t√≠tulo
titulo = tk.Label(ventana, text="¬°Bienvenido al cuestionario sobre Algoritmos Gen√©ticos!",
                  font=("Comic Sans MS", 16, "bold"), bg="#f0e6ff", fg="#6a1b9a")
titulo.pack(pady=10)

# Contador de preguntas
contador = tk.Label(ventana, text="", font=("Arial", 11), bg="#f0e6ff", fg="#555")
contador.pack(pady=5)

# Etiqueta de pregunta
etiqueta_pregunta = tk.Label(ventana, text="", font=("Arial", 13, "bold"), bg="#f0e6ff", fg="#333", wraplength=800, justify="left")
etiqueta_pregunta.pack(pady=10)

# Variable para guardar selecci√≥n del usuario
respuesta_var = tk.StringVar(value=None)

# Etiqueta de resultado
etiqueta_resultado = tk.Label(ventana, text="", font=("Arial", 11), fg="#7b1fa2", bg="#f0e6ff")
etiqueta_resultado.pack(pady=5)

# Lista de botones de opci√≥n
botones_opcion = []

# Reiniciar cuestionario
def reiniciar_cuestionario():
    global indice, puntaje_correctas, puntaje_incorrectas, respuestas, respondido
    indice = 0
    puntaje_correctas = 0
    puntaje_incorrectas = 0
    respuestas = []
    respondido = False
    
    # Mostrar nuevamente los elementos
    for boton in botones_opcion:
        boton.pack(pady=5, anchor="w", padx=50)
    frame_botones.pack(pady=10)
    boton_reiniciar.pack_forget()
    
    mostrar_pregunta()

# Mostrar una pregunta
def mostrar_pregunta():
    global respondido
    respondido = False
    contador.config(text=f"Pregunta {indice + 1} de {len(preguntas)}")
    etiqueta_pregunta.config(text=preguntas[indice]["pregunta"])
    respuesta_var.set(None)
    etiqueta_resultado.config(text="")
    for i, opcion in enumerate(preguntas[indice]["opciones"]):
        botones_opcion[i].config(text=opcion, value=opcion, state="normal")

# Validar respuesta
def validar_respuesta():
    global puntaje_correctas, puntaje_incorrectas, respondido

    if respondido:
        etiqueta_resultado.config(text="Ya respondiste esta pregunta", fg="#cc0000")
        return

    seleccion = respuesta_var.get()
    if not seleccion or seleccion == "None":
        etiqueta_resultado.config(text="Por favor selecciona una opci√≥n", fg="#cc0000")
        return

    correcta = preguntas[indice]["respuesta_correcta"]
    if seleccion == correcta:
        etiqueta_resultado.config(text="‚úì ¬°Correcto!", fg="#4caf50")
        puntaje_correctas += 1
    else:
        etiqueta_resultado.config(text=f"‚úó Incorrecto. La respuesta correcta era: {correcta}", fg="#f44336")
        puntaje_incorrectas += 1

    respuestas.append(seleccion)
    respondido = True

    for boton in botones_opcion:
        boton.config(state="disabled")

# Avanzar a la siguiente pregunta
def siguiente_pregunta():
    global indice, respondido
    if not respondido:
        etiqueta_resultado.config(text="Primero responde la pregunta antes de continuar ‚ö†", fg="#ff9800")
        return

    indice += 1
    if indice < len(preguntas):
        mostrar_pregunta()
    else:
        mostrar_resultado()

# Mostrar botones de opci√≥n
for i in range(4):
    boton = tk.Radiobutton(
        ventana, text="", variable=respuesta_var,
        font=("Arial", 12), bg="#f0e6ff", fg="#333",
        activebackground="#e1bee7", selectcolor="#ffffff",
        anchor="w", justify="left", wraplength=800, width=100
    )
    boton.pack(pady=5, anchor="w", padx=50)
    botones_opcion.append(boton)

# Botones de acci√≥n
frame_botones = tk.Frame(ventana, bg="#f0e6ff")
frame_botones.pack(pady=10)

boton_validar = tk.Button(frame_botones, text="Validar respuesta ‚úÖ", command=validar_respuesta,
                          bg="#8e24aa", fg="white", font=("Arial", 11, "bold"), relief="raised",
                          padx=10, pady=5)
boton_validar.grid(row=0, column=0, padx=10)

boton_siguiente = tk.Button(frame_botones, text="Siguiente ‚û°", command=siguiente_pregunta,
                            bg="#ab47bc", fg="white", font=("Arial", 11, "bold"),
                            relief="raised", padx=10, pady=5)
boton_siguiente.grid(row=0, column=1, padx=10)

# Bot√≥n de reinicio (inicialmente oculto)
boton_reiniciar = tk.Button(ventana, text="üîÑ Volver a hacer el cuestionario", command=reiniciar_cuestionario,
                            bg="#673ab7", fg="white", font=("Arial", 12, "bold"),
                            relief="raised", padx=15, pady=8)

# Mostrar resultado final
def mostrar_resultado():
    etiqueta_pregunta.config(text="¬°Gracias por completar el cuestionario! üí´")
    contador.config(text="")
    for boton in botones_opcion:
        boton.pack_forget()
    frame_botones.pack_forget()

    texto_final = "\n".join([f"{i+1}. {r}" for i, r in enumerate(respuestas)])
    resumen = (f"Tus respuestas fueron:\n\n{texto_final}\n\n"
               f"‚úÖ Correctas: {puntaje_correctas}\n"
               f"‚ùå Incorrectas: {puntaje_incorrectas}\n"
               f"Puntaje final: {puntaje_correctas}/{len(preguntas)} üéØ")

    etiqueta_resultado.config(text=resumen, fg="#6a1b9a", wraplength=800, justify="left")
    
    # Mostrar bot√≥n de reinicio
    boton_reiniciar.pack(pady=20)

# Iniciar la primera pregunta
mostrar_pregunta()

# Ejecutar loop principal
ventana.mainloop()
